#spotify data download
#run the following in Terminal before continuing
# export SPOTIPY_CLIENT_ID='49b756e678ec420c9bbcd5f1c7d9db98'
# export SPOTIPY_CLIENT_SECRET='3d4e82d8a4254a0daf1201d9823b7ddc'
# export SPOTIPY_REDIRECT_URI='http://google.com/'

import os
import sys
import json
import spotipy
import webbrowser
import spotipy.util as util
from json.decoder import JSONDecodeError
import requests
import math
import time
import pandas as pd
from IPython.display import display
from pandas.io.json import json_normalize
import sklearn as 
from sklearn.cluster import KMeans 
from sklearn import metrics 
from scipy.spatial.distance import cdist 
import numpy as np 
import matplotlib.pyplot as plt  
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.utils import resample
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report

username = "1254636534"
scope = '''
playlist-modify-private 
playlist-modify-public 
playlist-read-collaborative 
playlist-read-private
user-follow-modify 
user-follow-read 
user-library-modify 
user-library-read 
user-modify-playback-state 
user-read-currently-playing 
user-read-email 
user-read-playback-state 
user-read-private 
user-read-recently-played 
user-top-read''' #   

# Erase cache and prompt for user permission
try:
    token = util.prompt_for_user_token(username, scope) # add scope
except (AttributeError, JSONDecodeError):
    os.remove(f".cache-{username}")
    token = util.prompt_for_user_token(username, scope) # add scope

# Create our spotify object with permissions
spotifyObject = spotipy.Spotify(auth=token)

user = spotifyObject.current_user()
sp = spotifyObject

#########################################################################
#https://vsupalov.com/analyze-spotify-music-library-with-jupyter-pandas/
url = "https://api.spotify.com/v1/me/tracks"
headers = {'Authorization': "Bearer {}".format(token)}
r = requests.get(url, headers=headers)
parsed = json.loads(r.text)
all_songs = []
count_songs = parsed["total"]

#get raw data
for i in range(int(math.ceil(count_songs/50.0))):
    offset = 50*i
    url = "https://api.spotify.com/v1/me/tracks?limit=50&offset={}".format(offset)
    headers = {'Authorization': "Bearer {}".format(token)}
    r = requests.get(url, headers=headers)
    parsed = json.loads(r.text)
    all_songs.extend(parsed["items"])

# metadata
def song_metadata(all_songs):
    df1 = pd.DataFrame(columns = ['album','artist','song','url','popularity','added_at','release_date','uri'])
    for i in range(0, len(all_songs)):
        album = all_songs[i]['track']['album']['name']
        artist = all_songs[i]['track']['album']['artists'][0]['name']
        song = all_songs[i]['track']['name']
        url = all_songs[i]['track']['external_urls']['spotify']
        popularity = all_songs[i]['track']['popularity']
        added_at = all_songs[i]['added_at']
        release_date = all_songs[i]['track']['album']['release_date']
        uri = all_songs[i]['track']['uri']
        df1 = df1.append(pd.DataFrame([[album, artist, song, url, popularity, added_at, release_date, uri]], columns = ['album','artist','song','url','popularity','added_at','release_date','uri']))
    df1 = df1.reset_index()
    del df1['index']
    df1.set_index('uri', inplace=True)
    song_list = []
    for i in range(0, len(all_songs)):
        song_list.append(all_songs[i]['track']['uri'])
    df2 = pd.DataFrame()
    for i in range(0,math.ceil(len(song_list)/100)):
    	features = sp.audio_features(song_list[(i)*100:100*(i+1)])
    	df2 = df2.append(pd.DataFrame(features))
    df2.set_index('uri', inplace=True)
    df3 = df1.merge(df2, on = 'uri')
    return df3

like = pd.DataFrame()
like = song_metadata(all_songs)

uri = 'spotify:playlist:4zoDh60COnrbyctm9z9h77'
dislike_raw = sp.user_playlist_tracks(uri.split(':')[1], uri.split(':')[2])['items']
dislike = pd.DataFrame()
dislike = song_metadata(dislike_raw)

like['Liked'] = 1
dislike['Liked'] = 0

my_songs = pd.concat([like,dislike])
my_songs.to_csv(r'/Users/Will/Documents/Spotipy/my_songs.csv')

#public songs
public_songs1 = pd.read_csv(r'/Users/Will/Documents/Spotipy/the-spotify-hit-predictor-dataset/dataset-of-00s.csv') 
public_songs2 = pd.read_csv(r'/Users/Will/Documents/Spotipy/the-spotify-hit-predictor-dataset/dataset-of-10s.csv') 
public_songs3 = pd.read_csv(r'/Users/Will/Documents/Spotipy/the-spotify-hit-predictor-dataset/dataset-of-60s.csv') 
public_songs4 = pd.read_csv(r'/Users/Will/Documents/Spotipy/the-spotify-hit-predictor-dataset/dataset-of-70s.csv') 
public_songs5 = pd.read_csv(r'/Users/Will/Documents/Spotipy/the-spotify-hit-predictor-dataset/dataset-of-80s.csv') 
public_songs6 = pd.read_csv(r'/Users/Will/Documents/Spotipy/the-spotify-hit-predictor-dataset/dataset-of-90s.csv') 
public_songs = pd.concat([public_songs1, public_songs2, public_songs3, public_songs4, public_songs5, public_songs6])
public_songs = public_songs.reset_index()
del public_songs['index']

feat_cols = ['danceability', 'energy', 'key', 'loudness', 'mode',
       'speechiness', 'acousticness', 'instrumentalness', 'liveness',
       'valence', 'tempo','duration_ms', 'time_signature'] #artist

#setting up data for training
x = my_songs[feat_cols]
y = my_songs[['Liked']]
scaler = MinMaxScaler()
X = pd.DataFrame()
X = scaler.fit_transform(x)
X, y = resample(X, y, random_state=0)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

LRModel = LogisticRegression(random_state=0, class_weight='balanced').fit(X_train, y_train.values.ravel())

y_pred = LRModel.predict(X_test)
print(classification_report(y_test, y_pred, labels=[0,1]))

predictions = LRModel.predict(scaler.fit_transform(public_songs[feat_cols]))
public_songs['Predicted_Like'] = predictions

def get_uris(df):
    uri_list = df['uri'].tolist()
    return uri_list

def get_uris_raw(uri_list):
    uri_list_split = []
    for uri in uri_list:
        uri_list_split.append(uri.split(':')[2])
    return uri_list_split

uri_list = get_uris(public_songs)
uri_list_split = get_uris_raw(uri_list)

def get_more_data(uri_list_split):
    df = pd.DataFrame()
    for uri in uri_list_split:
        url = "https://api.spotify.com/v1/tracks/"+uri
        r = requests.get(url, headers=headers)
        parsed = json.loads(r.text)
        album = parsed['album']['name']
        url = parsed['external_urls']['spotify']
        popularity = parsed['popularity']
        release_date = parsed['album']['release_date']
        uri = parsed['uri']
        df = df.append(pd.DataFrame([[album, url, popularity, release_date, uri]], columns = ['album','url','popularity','release_date','uri']))
    df = df.reset_index()
    del df['index']
    df.set_index('uri', inplace=True)
    return df

df = get_more_data(uri_list_split)
df = df.merge(public_songs, on = 'uri')

predicted_likes = df[df['Predicted_Like']==1]
predicted_dislikes = df[df['Predicted_Like']==0]

predicted_likes.to_csv(r'/Users/Will/Documents/Spotipy/predicted_likes.csv')
predicted_dislikes.to_csv(r'/Users/Will/Documents/Spotipy/predicted_dislikes.csv')

results = sp.current_user_playlists()

def get_playlist_uris(results):
    df = pd.DataFrame()
    for i in range(0, len(results)):
        playlist = results['items'][i]['name']
        playlist_uri = results['items'][i]['uri']
        df = df.append(pd.DataFrame([[playlist, playlist_uri]], columns = ['playlist','playlist_uri']))
    df.set_index(['playlist'], inplace=True)
    return df

playlists_df = get_playlist_uris(results)
display(playlists_df)

uri_list = get_uris(predicted_likes)
playlist_uri = playlists_df.loc["Predicted Likes"][0]

def add_songs_to_playlist(uri_list, playlist_uri):
    df = pd.DataFrame()
    for uri in uri_list:
        url = "https://api.spotify.com/v1/playlists/"+playlist_uri+"/tracks"+uri
        requests.post(url, headers=headers)
    return


